JOIN and WHERE Used Together
----------------------------

JOIN:
used for connecting the employees and salaries tables.
WHERE
used to define the condition or conditions that will determine
which will be the connecting points between the two tables

SELECT
e.first_name,e.last_name,s.salary
FROM
employees e
JOIN
salaries s
ON
e.emp_no = s.emp_no
WHERE
salary>80000
ORDER BY
e.emp_no;


SELECT
e.first_name,e.last_name,e.hire_date,t.title
FROM
employees e
JOIN
titles t
ON
e.emp_no=t.emp_no
WHERE
first_name='Ramzi' AND
last_name = 'Erde'
ORDER BY
e.emp_no;




SQL Subqueries with IN nested inside WHERE
------------------------------------------

subqueries=inner queries=nested queries

- queries embedded in a query
- they are part of another query, called an outer query(outer select)


SELECT
  e.first_name,e.last_name
FROM
  employees e
WHERE
  e.emp_no IN (SELECT
    dm.emp_no
    FROM
     dept_manager dm);


SELECT
*
FROM
  dept_manager
WHERE
  emp_no IN (
SELECT
  emp_no
FROM
  employees
WHERE
 hire_date BETWEEN '1990-01-01' AND '1995-01-01');



SQL Subqueries with EXISTS NOT EXISTS
-------------------------------------

SQL Subqueries with EXISTS NOT EXISTS Nested Inside WHERE
EXISTS
- check whether certain row values are found within a subquery.
- this check is conducted row by row.
- it returns a Boolean value


SELECT
  e.first_name,e.last_name
FROM
  employees e
WHERE
  EXISTS (SELECT
    *
    FROM
     dept_manager dm
    WHERE
      dm.emp_no = e.emp_no
    )
ORDER BY emp_no DESC;

SQL Subqueries with EXISTS - NOT EXISTS Nested Inside WHERE

EXISTS
- Test row values for existence
- quicker in retrieving large amounts of data

IN
- Search among values
- faster with Smaller datasets

* some, though not all, nested queries can be rewritten using joins,
which are more efficient in general.
* this is true particularly for inner queries using the WHERE clause

WHERE Subqueries Best Works:
- allow for better structuring of the outer query.
- in some situations, the use of subqueries in much more intuitive
  compared to the use of complex joins and unions.
- many users prefer subqueries simply because they offer enhanced code readability.


SELECT
*
FROM
employees e
WHERE
EXISTS (
SELECT
*
FROM
titles t
WHERE
t.emp_no=e.emp_no
AND
title='Assistant Engineer');
