SQL views and How it works
---------------------------

Using SQL Views

View
----
a virtual whose contents are obtained from an existing
table or tables, called base tables.

The retrieval happens through an SQL statement, incorporated into the view.

Think of a view object as a view into the base table.

The view itself does not contain any real data; the data is physically stored
in the base table.

The view simply shows the data contained in the base table.


CREATE VIEW
view_name As 
SELECT
  column_1, column_2, .... column_n
FROM
  table_name;


Using SQL Views

- Saves a lot of coding time
- Occupies no extra memory
- Acts as a dynamic table because it instantly reflects data and
structural changes in the base table.


CREATE OR REPLACE VIEW v_manager_avg_dalary AS

SELECT
  ROUND(AVG(salary),2) as Manager_AVG_Salary
FROM
  salaries s
JOIN
  dept_manager m ON s.emp_no = m.emp_no;



Introduction to STored Routines
----------------------------

Routine
A usual, fixed action, or series of actions, repeated periodically.

SAMe O/P request is RoutinE


Stored routine
an SQL statement, or a set of SQL statements, that can be stored
on the database server.

Whenever a user needs to run the query in question, they can call,
reference or invoke the routine.

This routine can bring the desired result multiple times.

Stored Routines 2 types
1. Stored Procedures
2. Functions


The MYSQL syntax for stored procedures
-----------------------

DELIMITER  $$ or  //   which is like ;


DELIMITER$$
CREATE PROCEDURE  procedure_name(parameter1, param2)

** A procedure can be created without parameters too!
Nvertheless, the parentheses must always be attached to its name.


DELIMITER$$
CREATE PROCEDURE procedure_name()
BEGIN
SELECT * FROM employees
LIMIT 1000;
END$$
DELIMITER;


Stored Procedures
-----------

use employees;

DROP PROCEDURE IF EXISTS select_emplyees;

DELIMITER $$
CREATE PROCEDURE select_emplyees()
BEGIN
  SELECT * FROM 
  employees
  limit 5;
END$$
DELIMITER ;


call employees.select_emplyees();


DELIMITER $$
CREATE PROCEDURE avg_salary()
BEGIN
 SELECT
   AVG(salary)
 FROM
   salaries;
END$$
DELIMITER ;

CALL avg_salary;
CALL avg_salary();
CALL employees.avg_salary;
CALL employees.avg_salary();



DELIMITER $$

CREATE PROCEDURE emp_info(in p_first_name varchar(255), in p_last_name varchar(255), out p_emp_no integer)

BEGIN

SELECT
e.emp_no
INTO
p_emp_no FROM
employees e
WHERE
e.first_name = p_first_name
AND e.last_name=p_last_name;

END$$

DELIMITER ;

SET @v_emp_no=0;
CALL emp_info('Mary','Sluis',@v_emp_no);
SELECT @v_emp_no;

